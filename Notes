
// // Number Methods in TypeScript

// toExponential()  Returns the exponential notation in string format 

        const numbers = 123456789;
        const exponentialString = numbers.toExponential(); // default precision
        console.log(exponentialString); // Output: "1.23456789e+8"

        const newCustomPrecision = 3;
        const customExponentialString = numbers.toExponential(newCustomPrecision);
        console.log(customExponentialString); // Output: "1.235e+8"


// toFixed()    Returns the fixed-point notation

        const numbe = 3.1415926535;
        const fixedString = numbe.toFixed(); // default precision
        console.log(fixedString); // Output: "3"

        const custPrecision = 2;
        const customFixedString = numbe.toFixed(custPrecision);
        console.log(customFixedString); // Output: "3.14"

// toLocaleString()     Converts the number into a local specific representation of the number

        const num = 1234567.89;
        const localString = num.toLocaleString(); // Default locale formatting
        console.log(localString); // Output: "1,234,567.89"

        const customLocale = "de-DE"; // German locale
        const customLocalString = num.toLocaleString(customLocale);
        console.log(customLocalString); // Output: "1.234.567,89"

// toPrecision()    Returns the string representation in exponential or fixed-point to the specifies precision

        const number = 3.1415926535;
        const precisionString = number.toPrecision(); // default precision
        console.log(precisionString); // Output: "3.1415926535"

        const customPrecision = 4;
        const customPrecisionString = number.toPrecision(customPrecision);
        console.log(customPrecisionString); // Output: "3.142"

// toString()   Returns the string representation of the number in the specified base

        const newnum = 42;
        const numberString = newnum.toString();
        console.log(numberString); // Output: "42"

        const boolean = true;
        const booleanString = boolean.toString();
        console.log(booleanString); // Output: "true"

        const string = "Hello, world!";
        const stringString = string.toString();
        console.log(stringString); // Output: "Hello, world!"

        const array = [1, 2, 3];
        const arrayString = array.toString();
        console.log(arrayString); // Output: "1,2,3"

        const object = { key: "value" };
        const objectString = object.toString();
        console.log(objectString); // Output: "[object Object]"

// valueOf()  Returns the primitive value of the number

        const Numbers = new Number(42);
        console.log(Numbers.valueOf()); // 42


// String Methods in TypeScript

// charAt()   Returns the character at the given index

        const greet = "Hello, World!";
        console.log(greet.charAt(0)); // "H"
        console.log(greet.charAt(4)); // "o"
        console.log(greet.charAt(7)); // "W"
        console.log(greet.charAt(12)); // "d"
        console.log(greet.charAt(13)); // "!" (last character)
        console.log(greet.charAt(20)); // "" (out of range)

// concat() Returns a combimnation of the two or more specified strings

        const str1 = "Hello";
        const str2 = "World";
        const str3 = "!";
        const result1 = str1.concat(" ", str2, str3);
        console.log(result1); // "Hello World!"
        const result2 = str1.concat(" ").concat(str2).concat(str3);
        console.log(result2); // "Hello World!"

// indexOf() Returns an index of the first occurrence of the specified substring from the string (-1 if not found)

        const str = "Hello, World!";
        console.log(str.indexOf("o")); // 4
        console.log(str.indexOf("l")); // 2 (first occurrence)
        console.log(str.indexOf("l", 3)); // 3 (starting from index 3)
        console.log(str.indexOf("x")); // -1 (not found)

        console.log(str.lastIndexOf("o")); // 8
        console.log(str.lastIndexOf("l")); // 10 (last occurrence)
        console.log(str.lastIndexOf("l", 9)); // 3 (searching before index 9)
        console.log(str.lastIndexOf("x")); // -1 (not found)

// replace()   Replaces the matched substring with a new substring

        const message = "Hello, World!"
        const new_message = message.replace("Hello", "Hi")
        console.log(new_message) // Hi, World

// split()     splits the string into the substrings and returns an array 

// string.split(delimiter)
// - delimiter is optional parameter which specifies what separator should be used for splitting up the original string
        const sentence = "Hello,how,are,you,today?"
        const words = sentence.split(",")
        console.log(words)  // ['Hello', 'how', 'are', 'you', 'today?']


// toUpperCase() Converts all the characters of the string into upper case

        var msg = "Hello, World!";
        var uppercaseMessage = msg.toUpperCase();
        console.log(uppercaseMessage);  // HELLO, WORLD!


// toLowerCase()  Converts all the characters of the string into lower case

var lowercaseMessage = msg.toLowerCase();
console.log(lowercaseMessage); // hello, world!


// Declaring array with the Generic arraytype

let fruitsArray: Array<string> = ["mango", "peaches"]

// Array Methods in TypeScript 
// pop()  Removes the last element of the array and returns that element
// push()  Adds new elements to the array and the new array length
// sort()  Sorts all the element in the array
// concat() Joins two arrays and returns he combined result
// indexOf()  Returns the index of the first match of a value in an array (-1 if not found)
// copyWithin() Copies a sequence of elements within the array
// fill()   Fills the array with the static value from the provided start index to te end index
// shift()   Removes and returns the first element in an array
// unshift() Adds one or more elements to the begining of an array
// splice()  Adds or removes element from the array
// includes()  Checks whether the array contains a certain element
// join()  Joins all elements of the array into a string
// lastIndexOf() Returns the last index of an element in the array
// slice()   Extracts a section of the array and returns the new array
// toString()  Returns a string representation of an array 
// toLocaleString()  Returns a localized string representation of an array 


/*Tuples is a type in typescript. It is a data structure that allows you to store a fixed-size, ordered collection of elements of different types. 

const Tuples: [type1, type2, type3, ..., typeN] = [Value1, value2, value3, ..., valueN]*/


const person: [string, number, boolean] = ['Afolabi sodiq', 34, true]


//Enum
// There are three basic types of enum in TypeScript which are the
// Numeric Enum
// String Enum
// Heterogenous Enum
